%{
#include <iostream>
#include <string>
#include "driver.hpp"

/* Syntax error function */
void yy::parser::error(const location_type& l, const std::string& msg) {
	driver.error(l, msg);
}

%}

%language "c++"
%locations

%define api.value.type variant
%define api.token.constructor
%define parse.trace

/* Improves error messages */
%define parse.error verbose

/* Pass to flex */
%code requires {
class Driver;
}
%param { Driver &driver }

%token
	eof_token 0 "end of file"
	print_token "print"
	lparen_token "("
	rparen_token ")"
	separator_token ";"
	plus_token "+"
	assign_token ":="
	;

%token <std::string> 
	id_token "identifier";

%token <int> 
	int_token "number";

%type <int> 
	Exp;

%right ":="
%left "+"

%%


Program 
	: Naredba ";" Program
	| Naredba ";"
	;

Naredba 
	: print_token "(" Exp ")" {
		std::cout << $3 << std::endl;
	}
	| id_token ":=" Exp { driver.var_table[$1] = $3; }
	;

Exp
	: Exp "+" Exp { $$ = $1 + $3; }
	| int_token { $$ = $1; }
	| id_token { $$ = driver.var_table[$1]; }
	;


%%

int main(int argc, char * argv[]) 
{
	bool read_from_file = false;
	Driver driver;

	int i;
	for (i = 1; i < argc; i++) {
		if (argv[i] == std::string ("-p")) {
			driver.trace_parsing = true;
		} else if (argv[i] == std::string ("-s")) {
			driver.trace_scanning = true;
		} else {
			read_from_file = true;
		}
	}

	if (read_from_file)
		driver.parse(argv[i-1]);
	else
		driver.parse();

	return 0;
}
