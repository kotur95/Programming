%{
#include <iostream>
#include <map>
#include "matrica.hpp"

extern int yylex();

void yyerror(std::string errmsg) {
    std::cerr << "Sintaksna greska: " << errmsg << std::endl;
    exit(EXIT_FAILURE);
}

std::map<std::string, Matrica> tablica;

%}

%union {
    int int_type;
    std::string *string_type;
    Matrica *matrica_type;
    std::vector<int> * vector_type;
}

/* %type <matrica_type> */
%token disp_token size_token elwise_plus elwise_mul mul_token transp_token
%token <int_type> int_token
%token <string_type> id_token


/* %type <void_type> Naredba_disp Naredba_size Naredba_dodela */
%type <matrica_type> E Matrica Visedim_lista
%type <vector_type> Lista Niz_br

%left elwise_plus
%left elwise_mul

%left mul_token
%nonassoc transp_token

%%

Program : Naredba '\n' Program {}
	| Naredba '\n'	       {}
	;

Naredba : Naredba_disp
	| Naredba_size
	| Naredba_dodela
	;

Naredba_disp : disp_token '(' E ')' { std::cout << *$3 << std::endl; delete $3;}
	     ;

Naredba_size : size_token '(' E ')' { std::cout << $3->broj_vrsta() << 'x' << $3->broj_kolona() << std::endl; delete $3; }
	     ;

Naredba_dodela : id_token '=' E { tablica[*$1] = *$3; delete $1; }
	       ;

E : E elwise_plus E { $$ = new Matrica(*$1 + *$3); delete $1; delete $3; }
  | E elwise_mul E { $$ = new Matrica(*$1 * *$3); delete $1; delete $3; }
  | E mul_token E { $$ = new Matrica(Matrica::mul_matrix(*$1, *$3)); delete $1; delete $3; }
  | E transp_token { $$ = new Matrica(Matrica::transponuj(*$1)); delete $1; }
  | '(' E ')' { $$ = $2; }
  ;


E : Matrica { $$ = $1; }
  | id_token {
	if (tablica.find(*$1) != tablica.end()) {
		$$ = new Matrica(tablica[*$1]);
	} else {
		std::cout << "Greska, promenljiva nije definisana" << std::endl;
		exit(EXIT_FAILURE);
	}

	delete $1;
        }
  ;

Matrica : '[' Visedim_lista ']' { $$ = $2; };
	;

Visedim_lista : Visedim_lista ';' Lista { $$ = $1; $$->dodaj_vrstu(*$3); delete $3; }
	      | Lista { $$ = new Matrica(*$1); delete $1; }
	      ;

Lista : '[' Niz_br ']' { $$ = $2; }
      ;

Niz_br : Niz_br ',' int_token { $$ = $1; $$->push_back($3); }
       | int_token            { $$ = new std::vector<int>{ $1 }; }
       ;


%%

int main()
{
	yyparse();

	return 0;
}
