%{
#include <iostream>
#include <string>
#include <vector>
#include <map>

extern int yylex();
void yyerror(std::string err_msg) {
	std::cerr << "Sintaskna greska: " << err_msg << std::endl;
	exit(EXIT_FAILURE);	
}

/* Pomocna f-ja za ispisivanje liste */
void print_list(const std::vector<int> &l) {
    std::cout << '['; 
    for (const auto &e: l) {
        std::cout << e;
        if (&e != &(l.back()))
            std::cout << ", ";
    }
    std::cout << ']' << '\n'; 
}

/* Tablice simbola - za brojeve i liste */
std::map <std::string, int> tablica;
std::map <std::string, std::vector<int>> tablica_lista;
%}

%union {
	int broj_type;	
	std::string * string_type;
    std::vector<int> * list_type;
}

%token print_token int_token list_token eq_token neq_token
%token <broj_type> broj_token
%token <string_type> id_token
%token shr_token shl_token

%type <broj_type> E
%type <list_type> L Lista_brojeva

%left '|'
%left '^'
%left '&'
%left shr_token shl_token
%left '+' '-'
%left '*' '/'
%nonassoc '~'
%nonassoc UMINUS;

%%

Program  
	: Naredba ';' Program
	| Naredba ';'
	;

Naredba
	: print_token '(' E ',' broj_token ')' { 
		switch ($5) {
			case 8 : std::cout <<  std::oct << $3 << std::endl; break;
			case 10: std::cout << $3 << std::endl; break;
			case 16: std::cout << std::uppercase << std::hex << $3 << std::endl; break;
			default: std::cout << "Nepodrzana osnova" << std::endl;
		}						
	}

	| print_token '(' id_token ')' { 
		auto it = tablica.find(*$3);
		if (it != tablica.end()) {
			std::cout << std::dec << tablica[*$3] << std::endl;
		} else {
			auto it = tablica_lista.find(*$3);
			if (it != tablica_lista.end()) {
                print_list(tablica_lista[*$3]);
			} else {
				std::cout << *$3 << " nije definisana" << std::endl;
			}
		}
		delete $3;
	}

	| print_token '(' E ')' { 
		std::cout << std::dec << $3 << std::endl;
	}
	| print_token '(' L ')' { 
                print_list(*$3);
                delete $3; 
    } 
	| int_token id_token '='  E {
						auto it = tablica.find(*$2);
						if (it == tablica.end()) {
							tablica[*$2] = $4; 
						} else {
							std::cout << "Promenljiva je vec definisana" << std::endl;
						}
						delete $2;
	}
	| int_token id_token {
						auto it = tablica.find(*$2);
						if (it == tablica.end()) {
							tablica[*$2] = 0; 
						} else {
							std::cout << "Promenljiva je vec definisana" << std::endl;
						}
						delete $2;

	
	}
	| list_token id_token '='  L { 
						auto it = tablica_lista.find(*$2);
						if (it == tablica_lista.end()) {
							tablica_lista[*$2] = *$4; 
						} else {
							std::cout << "Promenljiva je vec definisana" << std::endl;
						}
                        delete $4;
						delete $2;
	}
	| list_token id_token { 
						auto it = tablica_lista.find(*$2);
						if (it == tablica_lista.end()) {
							tablica_lista[*$2] = std::vector<int>(); 
						} else {
							std::cout << "Promenljiva je vec definisana" << std::endl;
						}
						delete $2;
	}
	| id_token '='  E {	
					auto it = tablica.find(*$1);
					if (it != tablica.end()) {
						tablica[*$1] = $3; 
					} else {
						std::cout << *$1 << " nije definisana" << std::endl;
					}
						delete $1;
	}
	| id_token '='  L {	
					auto it = tablica_lista.find(*$1);
					if (it != tablica_lista.end()) {
						tablica_lista[*$1] = *$3; 
					} else {
						std::cout << *$1 << " nije definisana" << std::endl;
					}
                        delete $3;
						delete $1;
	}
	| E eq_token E { std::cout << ($1 == $3 ? "True" : "False") << std::endl; }
	| E  neq_token E { std::cout << ($1 != $3 ? "True" : "False") << std::endl; }
	| E { }
	| L { }
	;

E 
	: E '+' E  { $$ = $1 + $3; }
	| E '-' E  { $$ = $1 - $3; }
	| E '*' E  { $$ = $1 * $3; }
	| E '/' E  { $$ = $1 / $3; }
	| E '^' E  { $$ = $1 ^ $3; }
	| '-' E %prec UMINUS { $$ = - $2; }
	| E shl_token E  { if ($3 > 0) { $$ = $1 << $3; } else { std::cout << "Drugi operand mora biti veci od 0" << std::endl; } }
	| E shr_token E  { if ($3 > 0) { $$ = $1 >> $3; } else { std::cout << "Drugi operand mora biti veci od 0" << std::endl; }  }
	| E '&' E  { $$ = $1 & $3; }
	| E '|' E  { $$ = $1 | $3; }
	| '~' E  { $$ = ~$2; }
	| '(' E ')' { $$ = $2; }
	| L '[' E ']' { if ($1->size() > (unsigned) $3) { $$ = (*$1)[$3]; } else { std::cout << "Invalid index" << $3 << std::endl; $$ = 0; } delete $1;}
	| id_token {
		auto it = tablica.find(*$1);
		if (it != tablica.end()) {
			$$ = tablica[*$1];
		} else {
			std::cout << *$1 << " nije definisana" << std::endl;
		}	
		delete $1;
	 }
	| broj_token { $$ = $1; }
	;

L
	: '[' Lista_brojeva ']' { $$ = $2; }
	| id_token { 
		auto it = tablica_lista.find(*$1);
        $$ = new std::vector<int>(); 
		if (it != tablica_lista.end()) {
            *$$ = tablica_lista[*$1];
		} else {
			std::cout << "Greska, promenljiva nije dobro definisana" << std::endl;
		}
		delete $1;
	 };
	;

Lista_brojeva 
	: Lista_brojeva ',' E { $1->push_back($3); $$ = $1; }
	| E { $$ = new std::vector<int>(); $$->push_back($1); }
	;
	

%%

int main() 
{

	yyparse();

	return 0;
}
